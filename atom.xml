<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Kyle Rogers]]></title>
  <link href="http://keroger2k.github.io/atom.xml" rel="self"/>
  <link href="http://keroger2k.github.io/"/>
  <updated>2013-08-20T13:17:59-05:00</updated>
  <id>http://keroger2k.github.io/</id>
  <author>
    <name><![CDATA[Kyle Rogers]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Happy Fathers Day]]></title>
    <link href="http://keroger2k.github.io/blog/2012/06/17/happy-fathers-day/"/>
    <updated>2012-06-17T15:38:00-05:00</updated>
    <id>http://keroger2k.github.io/blog/2012/06/17/happy-fathers-day</id>
    <content type="html"><![CDATA[<p>Today is Father&rsquo;s Day. It is probably the best holiday of the year now for me. You can have Christmas, you can definitely keep my birthday, Father&rsquo;s Day is the bees knees. My wife is also probably the worlds best gift giver in the entire world when it comes to holidays like these. She always finds just the right gift that is always very thoughtful and very cool. I don&rsquo;t know if I&rsquo;m just crazy or weird, but it is definitely a love hate thing with me. I love it that I am the recipient of the awesome gift, but at the same time it puts a tremendous amount of pressure on for Mothers Day. I am not a good gift giver. My family has given me money for almost every holiday since I was in high school. There is no thought. There is no love in those gifts. It is just money. Boring money. My family always gives me the excuse that they don&rsquo;t want to buy me something I don&rsquo;t want and would rather I just get something I do want. Since I&rsquo;ve met my wife I&rsquo;ve discovered that that path is extremely lazy. Apparently? This Father&rsquo;s Day did not disappoint again. Got some amazing photography picture of my sons for my office and a book that probably took 6 weeks to put together. Basically I need to start working on her Mother&rsquo;s Day gift this week or I&rsquo;m going to be in trouble.</p>

<h2>Back to work</h2>

<p>Tomorrow is also my wife&rsquo;s first day back to work in ten weeks. Needless to say I don&rsquo;t think she was too into the Father&rsquo;s Day activities as she usually is? I can&rsquo;t imagine what it is like being a woman. I honestly don&rsquo;t know how ten weeks off of work and having to go back would affect me. I would like to think I would be upset, but I don&rsquo;t think it would be for the same reasons she is upset. Don&rsquo;t get me wrong, I love both of my children with all my heart and I wish I could spend every moment with them, but at the same time, I just don&rsquo;t want to HAVE to work and I think that would be a huge portion of my disappointment.</p>

<p>This is our second child. Our first child is over 2.5 years old now and raising trouble every chance he gets. With the first child things didn&rsquo;t go quite as smoothly as the second child. So when it was time for her to go back to work, although she definitely didn&rsquo;t want to go back, she did. She only asked like once or twice to quit work. This time around though things have went quite a bit better, so I think going back to work is even harder for her because she was having so much fun this time around. Every time she asks if she can quit I always bring up finances as my way to keep her going to work. We do rely heavily on her salary. I have never really spent the time figuring if it would work or not, but on the surface it definitely appears as though it wouldn&rsquo;t because we tend to live &ldquo;paycheck-to-paycheck&rdquo; now. I think we could possibly make it work, but it would change everything in our life. It would be an enormous adjustment for all of us. Then the idea of being at home all day everyday with two kids and no money to go do things, might not sound as appealing.</p>

<p>It also sort of makes me feel like a failure as a father and a provider. I wish I did make more for our family so a decision like this would be simple. Unfortunately I don&rsquo;t. I just don&rsquo;t know how bad I should feel about my current situation. It isn&rsquo;t as though I&rsquo;m a failure in my life. I&rsquo;m definitely not the cream of the crop. She is a good looking woman. She definitely could have done better than me if she wanted. But I don&rsquo;t think our lives would be improved by her quitting. It would be worse for everyone. Raising two kids is a challenge. People always seem to say it is not that hard and I don&rsquo;t believe them. It is hard. At least it has been hard to this point. Two kids are a game changer. We are running a man-to-man defense here at the house. Actually its more like a Sun Tzu Art of War conqueor and divide strategy, but so far it is working. Perhaps it wil get easier when the kids get older, but right now it doesn&rsquo;t seem like that day will be here soon enough.</p>

<h2>Thankful</h2>

<p>This is all very random for me to write this and with the amount of traffic I&rsquo;m seeing on google analytic the likelihood that anyone reads this, besides me, is very slim, so please comment if you are the one person that happens to read this page. I really feel blessed this father&rsquo;s day in a lot of ways. My family is amazing. I have two great sons and a wonderful caring wife. She has done so many special things for me and I know I&rsquo;ll never be able to thank her enough. I hope in the future I can find a way to make her happy and make being a mom and more challenging, being married to me easier for her. I don&rsquo;t know if I will ever be able to say, &ldquo;make tomorrow your last day&rdquo;, but who knows. Perhaps tomorrow will be that day?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[System.Net.IP.Address Shortcomings]]></title>
    <link href="http://keroger2k.github.io/blog/2012/06/06/system-dot-net-dot-ip-dot-address-shortcomings/"/>
    <updated>2012-06-06T15:35:00-05:00</updated>
    <id>http://keroger2k.github.io/blog/2012/06/06/system-dot-net-dot-ip-dot-address-shortcomings</id>
    <content type="html"><![CDATA[<h1>Overview</h1>

<p>Perhaps I&rsquo;m going about this completely the wrong way, but from what I can tell, there really isn&rsquo;t much logic built into the framework for IP Addressing and C#. There is a System.Net.IPAddress class that has some very limited capabilities IMO. I just don&rsquo;t understand why there isn&rsquo;t some additional functionality with this class or some sister class that helps simplify common tasks with IP address functionality. For example an IP address is mostly useless alone. Without a subnet mask you have no real sense of the IP address. Once you have the subnet mask you then can extrapolate all the details such as network address, broadcast address, size, etc&hellip; I wish the System.Net.IPAddress class allowed you to do more things like this natively.</p>

<p>Below are a few methods to help extend on the logic of System.Net.IPAddress. I thought I&rsquo;d share what has been completed so far. I&rsquo;ve also included the NUnit test cases that go along with this class to help with understanding what each of the methods are doing.</p>

<h1>The Code</h1>

<div><script src='https://gist.github.com/2884281.js?file=IPHelper.cs'></script>
<noscript><pre><code>public class IPHelper : IIPHelper {
    /// &lt;summary&gt;
    /// Verifies IP Address is Valid
    /// &lt;/summary&gt;
    public bool ip_inside_range(string subnet, string ipAddress) {
      string[] token = subnet.Split('/');
      string mask = token[1].Contains(&quot;.&quot;) ? token[1] : ip_cidrtomask(byte.Parse(token[1]));
      uint networkAddress = ip_iptouint(ip_networkAddress(token[0], mask));
      uint broadcastAddress = ip_iptouint(ip_broadcastAddress(token[0], mask));
      uint ip = ip_iptouint(ipAddress);
      return (networkAddress &lt; ip &amp;&amp; ip &lt; broadcastAddress);
    }
    /// &lt;summary&gt;
    /// Verifies IP Address is Valid
    /// &lt;/summary&gt;
    public bool valid_ip(string address) {
      try {
        IPAddress test = IPAddress.Parse(address);
        return true;
      } catch (FormatException) {
        return false;
      }
    }
    /// &lt;summary&gt;
    /// Takes an IP address string value in dotted decial format and convert it to a uint value
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;ip&quot;&gt;String value of the IP address in dotted decimal format (i.e. 192.168.10.1)&lt;/param&gt;
    /// &lt;returns&gt;Unsigned integer value that represents the IP address passed in&lt;/returns&gt;
    public uint ip_iptouint(string ip) {
      IPAddress i = IPAddress.Parse(ip);
      byte[] ipByteArray = i.GetAddressBytes();

      uint ipUint = (uint)ipByteArray[0] &lt;&lt; 24;
      ipUint += (uint)ipByteArray[1] &lt;&lt; 16;
      ipUint += (uint)ipByteArray[2] &lt;&lt; 8;
      ipUint += (uint)ipByteArray[3];

      return ipUint;
    }
    /// &lt;summary&gt;
    /// Convert a uint IP address value to a string value in dotted decimal format
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;ip&quot;&gt;Unsigned integer value of IP address&lt;/param&gt;
    /// &lt;returns&gt;String value of the IP address in dotted decimal format&lt;/returns&gt;
    public string ip_uinttoip(uint ip) {
      IPAddress i = new IPAddress(ip);
      string[] ipArray = i.ToString().Split('.');
      
      return ipArray[3] + &quot;.&quot; + ipArray[2] + &quot;.&quot; + ipArray[1] + &quot;.&quot; + ipArray[0];
    }
    /// &lt;summary&gt;
    /// Converts the subnet mask into CIDR notation
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;Mask&quot;&gt;string value of network mask in dotted decimal notation (i.e. 255.255.255.0)&lt;/param&gt;
    /// &lt;returns&gt;Byte value of the CIDR&lt;/returns&gt;
    public byte ip_masktocidr(string Mask) {
      uint mask = ip_iptouint(Mask);
      byte bits = 0;
      for (uint pointer = 0x80000000; (mask &amp; pointer) != 0; pointer &gt;&gt;= 1) {
        bits++;
      }
      return bits;
    }
    /// &lt;summary&gt;
    /// Convert a subnetmask in CIDR notation to an unsigned integer value
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;CIDR&quot;&gt;Subnet mask in CIDR notation&lt;/param&gt;
    /// &lt;returns&gt;Unsigned integer that represents the subnet mask&lt;/returns&gt;
    public uint ip_cidrtouintmask(byte CIDR) {
      return 0xFFFFFFFF &lt;&lt; (32 - CIDR);
    }
    /// &lt;summary&gt;
    /// Convert a subnet mask in CIDR notation to a dotted decimal string value
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;CIDR&quot;&gt;Subnet mask in CIDR notation&lt;/param&gt;
    /// &lt;returns&gt;String value of the subnet mask in dotted decimal notation&lt;/returns&gt;
    public string ip_cidrtomask(byte CIDR) {
      return ip_uinttoip(ip_cidrtouintmask(CIDR));
    }
    /// &lt;summary&gt;
    /// Checks to ensure the network address passed in is a valid subnet address
    /// and validates the network address is in the proper format
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;Network&quot;&gt;Network address in the format x.x.x.x/CIDR, x.x.x.x/x.x.x.x or x.x.x.x&lt;/param&gt;
    /// &lt;returns&gt;True if it is a valid network address and false if it is not&lt;/returns&gt;
    public bool ip_is_valid(string Network) {
      if (Network.Contains(&quot;/&quot;)) {
        string[] token = Network.Split('/');
        if (token.Length != 2) return false;
        if (!(ip_is_valid(token[0]))) return false;
        if (token[1].Contains(&quot;.&quot;)) {
          if (!(ip_is_valid(token[1]))) return false;
        } else {
          byte fred = 0;
          if (!(byte.TryParse(token[1], out fred))) return false;
          if (fred &gt; 32) return false;
        }
        uint ipAddr = ip_iptouint(token[0]);
        uint Mask = token[1].Contains(&quot;.&quot;) ? ip_iptouint(token[1]) : ip_cidrtouintmask(byte.Parse(token[1]));

        if (token[1].Contains(&quot;.&quot;)) {
          var tmp1 = String.Join(&quot;&quot;, token[1].Split('.')
            .Select(c =&gt; Convert.ToString(Int32.Parse(c), 2)));
          if (tmp1.Contains(&quot;01&quot;)) return false;
        }

        return ((ipAddr &amp; Mask) == ipAddr);
      } else {
        string[] token = Network.Split('.');
        if (token.Length != 4) return false;
        byte fred = 0;
        foreach (string octet in token) {
          if (!(byte.TryParse(octet, out fred)))
            return false;
        }
        return true;
      }
    }
    /// &lt;summary&gt;
    /// Returns the number of IP address a given mask will support
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;Mask&quot;&gt;String value of the mask to use in dotted decimal format&lt;/param&gt;
    /// &lt;returns&gt;Unsigned integer containing the number of IP addresses the passed in mask will support&lt;/returns&gt;
    public uint ip_size(string Mask) {
      return (uint)Math.Pow(2, 32 - (double)ip_masktocidr(Mask));
    }
    /// &lt;summary&gt;
    /// Returns the number of IP address a given CIDR will support
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;CIDR&quot;&gt;Byte value of the CIDR to be used&lt;/param&gt;
    /// &lt;returns&gt;Unsigned integer containing the number of IP addresses the passed in CIDR will support&lt;/returns&gt;
    public uint ip_size(byte CIDR) {
      return (uint)Math.Pow(2, 32 - (double)CIDR);
    }
    /// &lt;summary&gt;
    /// Find the shortest prefix that fit both the first and second IP addresses passed in
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;ip1&quot;&gt;IP address in uint format of the first IP address&lt;/param&gt;
    /// &lt;param name=&quot;ip2&quot;&gt;IP address in uint format of the second IP address&lt;/param&gt;
    /// &lt;returns&gt;The shortest prefix length that will accomodate the two IP addresses passed in&lt;/returns&gt;
    public byte ip_get_prefix_length(uint ip1, uint ip2) {
      byte i = 0;
      for (uint pointer = 1; pointer != 0; pointer &lt;&lt;= 1) {
        if ((ip1 &amp; pointer) == (ip2 &amp; pointer)) {
          return i;
        } else {
          i++;
        }
      }
      return 32;
    }
    /// &lt;summary&gt;
    /// Returns the broadcast address of the network and subnet sent to it
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;Network&quot;&gt;An unsigned integer value of the network&lt;/param&gt;
    /// &lt;param name=&quot;Subnet&quot;&gt;An unsigned integer value of the subnet mask&lt;/param&gt;
    /// &lt;returns&gt;The unsigned IP address of the broadcast address for this subnet&lt;/returns&gt;
    public uint ip_broadcastAddress(uint Network, uint Subnet) {
      return (Network | (0xFFFFFFFF ^ Subnet));
    }
    /// &lt;summary&gt;
    /// Returns the broadcast address of the network and subnet sent to it
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;Network&quot;&gt;string value of the network&lt;/param&gt;
    /// &lt;param name=&quot;Subnet&quot;&gt;string value of the subnet mask&lt;/param&gt;
    /// &lt;returns&gt;String of the IP address of the broadcast address for this subnet&lt;/returns&gt;
    public string ip_broadcastAddress(string Network, string Subnet) {
      return ip_uinttoip(ip_broadcastAddress(ip_iptouint(Network), ip_iptouint(Subnet)));
    }
    /// &lt;summary&gt;
    /// Returns the Network Address as unsigned int
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;Network&quot;&gt;Address as unsigned int&lt;/param&gt;
    /// &lt;param name=&quot;Subnet&quot;&gt;Subnet mask as unsigned int&lt;/param&gt;
    /// &lt;returns&gt;Returns unsigned int of broadcast address&lt;/returns&gt;
    public uint ip_networkAddress(uint Network, uint Subnet) {
      return (Subnet &amp; Network);
    }
    /// &lt;summary&gt;
    /// Returns the Network Address as a string
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;Network&quot;&gt;Address as a string&lt;/param&gt;
    /// &lt;param name=&quot;Subnet&quot;&gt;Subnet mask as a string&lt;/param&gt;
    /// &lt;returns&gt;Returns unsigned int of broadcast address&lt;/returns&gt;
    public string ip_networkAddress(string Network, string Subnet) {
      return ip_uinttoip(ip_networkAddress(ip_iptouint(Network), ip_iptouint(Subnet)));
    }
    /// &lt;summary&gt;
    /// Returns the starting and ending host addresses in the network provided
    /// &lt;/summary&gt;
    /// &lt;param name=&quot;Network&quot;&gt;&lt;/param&gt;
    /// &lt;returns&gt;&lt;/returns&gt;
    public ArrayList ip_range(string Network) {
      ArrayList retValue = new ArrayList();
      string[] token = Network.Split('/');
      uint ipAddr = ip_iptouint(token[0]);
      retValue.Add(ip_uinttoip(ipAddr + 1));
      if (token[1].Contains(&quot;.&quot;)) {
        retValue.Add(ip_uinttoip(ipAddr + ip_size(token[1]) - 1));
      } else {
        retValue.Add(ip_uinttoip(ipAddr + ip_size(byte.Parse(token[1])) - 1));
      }
      return (retValue);
    }
  } </code></pre></noscript></div>


<h1>The Tests</h1>

<p>Here are a few test to ensure the validity of the IPHelper class. I know there are probably a lot more test I could create, but right now this has covered everything. So far so good.</p>

<div><script src='https://gist.github.com/2884281.js?file=IPHelperTests.cs'></script>
<noscript><pre><code>[TestFixture]
  public class IPHelperTests {

    [TestCase(&quot;10.0.0.0/24&quot;, &quot;10.0.0.27&quot;)]
    [TestCase(&quot;10.0.0.0/255.255.254.0&quot;, &quot;10.0.1.27&quot;)]
    public void validates_valid_addresses_inside_given_range_returns_true(string range, string address) {

      var ipHelp = new IPHelper();

      bool result = ipHelp.ip_inside_range(range, address);

      Assert.IsTrue(result);
    }

    [TestCase(&quot;10.0.0.0/23&quot;, &quot;10.0.3.27&quot;)]
    [TestCase(&quot;10.0.0.0/255.255.254.0&quot;, &quot;10.0.3.27&quot;)]
    public void validates_invalid_addresses_outside_given_range_returns_false(string range, string address) {

      var ipHelp = new IPHelper();

      bool result = ipHelp.ip_inside_range(range, address);

      Assert.IsFalse(result);
    }

    [TestCase(&quot;10.0.1.0&quot;)]
    [TestCase(&quot;10.0.1.0/24&quot;)]
    [TestCase(&quot;10.0.1.0/255.255.255.0&quot;)]
    public void validates_ip_is_valid_given_valid_ip_addresses_returns_true(string address) {

      var ipHelp = new IPHelper();

      bool result = ipHelp.ip_is_valid(address);

      Assert.IsTrue(result);
    }

    [TestCase(&quot;10.0.257.0&quot;)]
    [TestCase(&quot;10.0.1.0/23&quot;)]
    [TestCase(&quot;10.0.1.0/255.0.255.0&quot;)]
    [TestCase(&quot;10.0.0.0/255.257.255.0&quot;)]
    public void validates_ip_is_valid_given_invalid_ip_addresses_returns_false(string address) {

      var ipHelp = new IPHelper();

      bool result = ipHelp.ip_is_valid(address);

      Assert.IsFalse(result);
    }


    [Test]
    public void validate_ip_cidrtounintmask() {

      var ipHelp = new IPHelper();

      uint result = ipHelp.ip_cidrtouintmask(24);

      Assert.AreEqual(4294967040, result);

    }

    [Test]
    public void validate_ip_cidrtomask() {

      var ipHelp = new IPHelper();

      string result = ipHelp.ip_cidrtomask(24);

      Assert.AreEqual(&quot;255.255.255.0&quot;, result);

    }

    [Test]
    public void validate_ip_uinttoip() {

      var ipHelp = new IPHelper();

      string result = ipHelp.ip_uinttoip(4294967040);

      Assert.AreEqual(&quot;255.255.255.0&quot;, result);

    }

    [Test]
    public void validate_ip_iptouint() {

      var ipHelp = new IPHelper();

      uint result = ipHelp.ip_iptouint(&quot;10.0.0.0&quot;);

      Assert.AreEqual(Convert.ToUInt32(167772160), result);

    }

    [Test]
    public void validate_ip_masktocidr() {

      var ipHelp = new IPHelper();

      byte result = ipHelp.ip_masktocidr(&quot;255.255.255.0&quot;);

      Assert.AreEqual(Convert.ToByte(24), result);

    }

    [Test]
    public void validate_ip_size() {

      var ipHelp = new IPHelper();

      uint result1 = ipHelp.ip_size(&quot;255.255.0.0&quot;);
      uint result2 = ipHelp.ip_size(15);

      Assert.AreEqual(Convert.ToUInt32(65536), result1);
      Assert.AreEqual(Convert.ToUInt32(131072), result2);

    }

    [Test]
    public void validate_ip_get_prefix_length() {

      var ipHelp = new IPHelper();
      var ip1 = ipHelp.ip_iptouint(&quot;192.168.0.0&quot;);
      var ip2 = ipHelp.ip_iptouint(&quot;192.168.0.127&quot;);
      byte result = ipHelp.ip_get_prefix_length(ip1, ip2);

      Assert.AreEqual(Convert.ToByte(7), result);

    }

    [Test]
    public void validate_ip_broadcastAddress() {

      var ipHelp = new IPHelper();
      var ip1 = 3232235520; //192.168.0.0
      var ip2 = 4294966784; //255.255.254.0
      uint result_uint = ipHelp.ip_broadcastAddress(ip1, ip2);
      string result_string = ipHelp.ip_broadcastAddress(&quot;192.168.0.0&quot;, &quot;255.255.254.0&quot;);

      Assert.AreEqual(Convert.ToUInt32(3232236031), result_uint);
      Assert.AreEqual(&quot;192.168.1.255&quot;, result_string);
    }

    [Test]
    public void validate_ip_networkAddress() {

      var ipHelp = new IPHelper();
      var ip1 = 3232235520; //192.168.0.0
      var ip2 = 4294966784; //255.255.254.0
      uint result_uint = ipHelp.ip_networkAddress(ip1, ip2);
      string result_string = ipHelp.ip_networkAddress(&quot;192.168.1.0&quot;, &quot;255.255.254.0&quot;);

      Assert.AreEqual(Convert.ToUInt32(3232235520), result_uint);
      Assert.AreEqual(&quot;192.168.0.0&quot;, result_string);
    }

    [Test]
    public void validate_ip_range() {

      var ipHelp = new IPHelper();
      ArrayList result1 = ipHelp.ip_range(&quot;192.168.0.0/22&quot;);
      ArrayList result2 = ipHelp.ip_range(&quot;192.168.0.2/27&quot;);

      Assert.AreEqual(&quot;192.168.0.1&quot;, result1[0]);
      Assert.AreEqual(&quot;192.168.3.255&quot;, result1[1]);

      Assert.AreEqual(&quot;192.168.0.3&quot;, result2[0]);
      Assert.AreEqual(&quot;192.168.0.33&quot;, result2[1]);

    }


    [TestCase(&quot;0.0.0.0&quot;)]
    [TestCase(&quot;10.0.1.0&quot;)]
    [TestCase(&quot;10.0.1.0&quot;)]
    [TestCase(&quot;255.255.255.255&quot;)]
    public void validate_valid_ip_correctly_identifies_valid_addresses(string address) {

      var ipHelp = new IPHelper();

      bool result = ipHelp.valid_ip(address);

      Assert.IsTrue(result);

    }

    [TestCase(&quot;256.0.0.0&quot;)]
    [TestCase(&quot;1.256.0.0&quot;)]
    [TestCase(&quot;1.1.256.0&quot;)]
    [TestCase(&quot;1.1.1.256&quot;)]
    public void validate_valid_ip_correctly_identifies_invalid_addresses(string address) {

      var ipHelp = new IPHelper();

      bool result = ipHelp.valid_ip(address);

      Assert.IsFalse(result);

    }
  }</code></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Up and running with Sinatra]]></title>
    <link href="http://keroger2k.github.io/blog/2012/06/01/up-and-running-with-sinatra/"/>
    <updated>2012-06-01T00:13:00-05:00</updated>
    <id>http://keroger2k.github.io/blog/2012/06/01/up-and-running-with-sinatra</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>I&rsquo;ve been playing around with ruby on rails for quite some time now.  Although I&rsquo;m primarily a
.NET developer, I find rails a very interesting framework to develop with mainly because of the
community that is built around rails.  From inception to initial deployment can be minutes with
scaffolding, gemfiles and heroku at your disposal.  The community for rails is tremendous and just
about everything you can imagine has already been thought of and a gem created for you.  In the .NET world
only recently have we had something similar with <a href="http://nuget.org/">NuGet</a> and that has made quite an impact on how
things are done within the .NET world.</p>

<p>To get a better understanding of how rails works, I&rsquo;ve been trying out the microframework called <a href="http://www.sinatrarb.com/">Sinatra</a>.  Sinatra is a very lightweight framework that doesn&rsquo;t abstract away a lot of what is truly happening.</p>

<h2>Getting Started</h2>

<p>To get started create a simple directory framework for an application that for now will just serve up static content:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>- Hotel
</span><span class='line'>  - App\
</span><span class='line'>      - app.rb
</span><span class='line'>      - boot.rb
</span><span class='line'>      - hotel.rb
</span><span class='line'>  - Gemfile
</span><span class='line'>  - Rakefile
</span><span class='line'>  - config.ru
</span><span class='line'>  - Procfile
</span><span class='line'>  - Readme.md</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;Readme.md&rsquo; file is mainly for use with <a href="http://www.github.org">github</a>.  Github uses the readme file
for a way for the  author to explain the purpose of the application along with any helpful syntaxes, scenarios etc&hellip;</p>

<p>The Gemfile is what tells ruby what the dependencies are required to run the application.  You want to make sure you have
the Gemfile located in the root directory and the very first line should be a link to the source for the gems.  In this
example rubygems.org is being used.  Below the source are the list of gems that are required to get the sinatra
application up and running.</p>

<ul>
<li>rack (middleware that sits between your application and the server.  Handles API calls, HTTP params, etc&hellip;)</li>
<li>rake (software specifically designed for task within your application)</li>
<li>sinatra (Lightweight, simple, powerful DSL (Domain Specific Language) developed for ruby and reliant on rack)</li>
<li>mustache (templating framework for views)</li>
<li>foreman (Process management for Procfile-based applicaitons.)</li>
<li>thin (Webserver used to run application.)</li>
</ul>


<p>A lot of the gems above I used because <a href="http://www.heroku.com">Heroku</a>.  It just makes things easier for me.  There are a lot of great alternatives to mustache, thin, etc&hellip;, but I&rsquo;ll be using these in my examples.  There are also some gems for testing that I like to use, but they are not required for getting up and running.</p>

<div><script src='https://gist.github.com/2848476.js?file=Gemfile'></script>
<noscript><pre><code>source 'http://rubygems.org'
gem 'rack'
gem 'rake'
gem 'sinatra'
gem 'mustache'
gem 'foreman'
gem 'thin'

group :test do
  gem 'rack-test'
  gem 'mocha',        '~&gt;0.11.1'
end
</code></pre></noscript></div>


<p>The procfile is what foreman uses to start the thin webserver.  In the example below it is telling the thin webserver
to start up and use port 5050.  Once the webserver is up and running you will be able to preview the results by going to
<a href="http://localhost:5050">http://localhost:5050</a>.</p>

<div><script src='https://gist.github.com/2848476.js?file=Procfile'></script>
<noscript><pre><code>web:      bundle exec thin start -p 5050
</code></pre></noscript></div>


<p>The config.ru file is executed when the application is starting and instructs the application
to require certain libraries that we&rsquo;ve included.  In this example I&rsquo;ve put most of the require statements in a file called boot.rb and the first line is giving it the location to that file for the includes.</p>

<div><script src='https://gist.github.com/2848476.js?file=config.ru'></script>
<noscript><pre><code>require File.expand_path(File.dirname(__FILE__) + '/app/boot')

map('/')         { run Hotel::App }</code></pre></noscript></div>


<p>The boot.rb file isn&rsquo;t required, because it could all be put into the config.ru file, but this is a nice way
to keep the require statements for the application in a centralized place.</p>

<div><script src='https://gist.github.com/2848476.js?file=boot.rb'></script>
<noscript><pre><code>$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__))

require &quot;rubygems&quot;
require &quot;bundler/setup&quot;

require 'sinatra/base'
require 'mustache/sinatra'

require 'hotel'
require 'app'
</code></pre></noscript></div>


<p>Using rake can be extremely powerful.  It allows you to configure common tasks within your application.  In the startup example there is only one task that needs to be performed, starting the application itself.  In this example it is telling foreman to start which in turn will read the Procfile in the root directory and foreman will start the thin webserver on the port 5050.</p>

<div><script src='https://gist.github.com/2848476.js?file=Rakefile'></script>
<noscript><pre><code>require 'rubygems'
require 'rake'

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/app')

require 'boot'

desc &quot;Start the server&quot;
task :start do
  Kernel.exec &quot;bundle exec foreman start&quot;
end</code></pre></noscript></div>


<p>The app.rb is the meat of the application so far.  This class inherits from Sinatra::Base.  This is the base class for all Sinatra applications.  Here we are telling our Sinatra application to respond to only the &ldquo;/&rdquo; GET request.  So any other request currently will return a 404.  If a &ldquo;/&rdquo; GET request is received it will simply respond with the current time on the server.  Nothing fancy but proves that Sinatra is up and running correctly.  You will need to understand the different HTML
method definitions to layout responses for your Sinatra application.  The most commonly used methods are GET, POST, PUT, DELETE.</p>

<div><script src='https://gist.github.com/2848476.js?file=app.rb'></script>
<noscript><pre><code>module Hotel
  class App &lt; Sinatra::Base
    get &quot;/&quot; do
      &quot;Hello world, it's #{Time.now} at the server!&quot;
    end
  end
end</code></pre></noscript></div>


<p>Here is where application specific logic will be stored.  Nothing is currently required so this is an empty class currently.</p>

<div><script src='https://gist.github.com/2848476.js?file=hotel.rb'></script>
<noscript><pre><code>module Hotel
end</code></pre></noscript></div>


<p>Once all theses file are created and in place.  Run &lsquo;rake start&rsquo; and visit <a href="http://localhost:5050">http://localhost:5050</a> to see the current time on the server.</p>

<h2>Conclusion</h2>

<p>In this first post of mine I&rsquo;m not really showing too much of the functionality of Sinatra itself.  It is basically a guide on how to get up and running and what is required.  Although there is much less required to get started I think this is a good structure to start with for real applications.  If you want a bare bones up and running introduction the <a href="http://www.sinatrarb.com/">Sinatra</a> has some great examples.</p>
]]></content>
  </entry>
  
</feed>
